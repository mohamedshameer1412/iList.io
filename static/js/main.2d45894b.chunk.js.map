{"version":3,"sources":["Components/TaskInput.js","Components/TaskNote.js","Components/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["TaskInput","_ref","addItem","todo","setTodo","useState","React","createElement","Fragment","className","onSubmit","e","preventDefault","trim","type","id","name","value","placeholder","onChange","target","required","TaskNote","tasks","removeItem","searchQuery","setTasks","selectedTask","setSelectedTask","editedTask","setEditedTask","filteredTasks","filter","task","toDoItem","toLowerCase","includes","pendingTasks","status","completedTasks","completeTask","taskId","setTimeout","map","openModal","closeModal","importantBadge","important","concat","style","top","left","width","onClick","toggleImportant","length","sort","a","b","index","key","height","checked","htmlFor","textAlign","substring","tabIndex","display","backgroundColor","slice","rows","cols","saveEditedTask","Date","toLocaleString","Math","floor","random","Navbar","handleSearch","setSearchQuery","navBg","data-bs-theme","href","src","alt","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","role","disabled","data-bs-backdrop","data-bs-keyboard","aria-labelledby","aria-hidden","data-bs-dismiss","clearAllTasks","App","toDoListArray","setToDoListArray","storedNotes","localStorage","getItem","JSON","parse","listening","setListening","speechRecognition","setSpeechRecognition","transcript","setTranscript","setNavBg","useEffect","setItem","stringify","addItemToArray","prevArray","changeNavBg","window","scrollY","addEventListener","removeEventListener","event","handleToggleListening","stop","recognition","webkitSpeechRecognition","lang","onresult","results","onend","start","TaskNoteList","item","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.2d45894b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction TaskInput({ addItem }) {\r\n    const [todo, setTodo] = useState('');\r\n\r\n    // Function to remove unwanted spaces before submission\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (!todo.trim()) return;\r\n        addItem(todo,);\r\n        setTodo('');\r\n    };\r\n\r\n    return (\r\n        // Task Input Form\r\n        <>\r\n            <div className=\"text-center mt-5\">\r\n                <form onSubmit={handleSubmit} className=\"form\">\r\n                    <div className=\"mb-3\">\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"todo\"\r\n                            name=\"to-do\"\r\n                            value={todo}\r\n                            placeholder='~ Today I need to ~'\r\n                            onChange={(e) => setTodo(e.target.value)}\r\n                            className=\"form__input\"\r\n                            required\r\n                        />\r\n                        <button type=\"submit\" className=\"button  ms-2\">\r\n                            <span>Submit</span>\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TaskInput;\r\n","import React, { useState } from 'react';\r\n\r\n\r\nfunction TaskNote({ tasks, removeItem, searchQuery, setTasks }) {\r\n  const [selectedTask, setSelectedTask] = useState(null);\r\n  const [editedTask, setEditedTask] = useState('');\r\n\r\n  // Filter the tasks based on the search query\r\n  const filteredTasks = tasks.filter(task =>\r\n    task.toDoItem.toLowerCase().includes(searchQuery.toLowerCase())\r\n  );\r\n\r\n  // Split tasks into pending and completed tasks\r\n  const pendingTasks = filteredTasks.filter(task => task.status === 'Pending');\r\n  const completedTasks = filteredTasks.filter(task => task.status === 'Completed');\r\n\r\n  // Function to toggle Pending Tasks to Completed Tasks\r\n  const completeTask = (taskId) => {\r\n    setTimeout(() => {\r\n      setTasks(tasks.map(task => {\r\n        if (task.id === taskId) {\r\n          return { ...task, status: task.status === 'Pending' ? 'Completed' : 'Pending' };\r\n        }\r\n        return task;\r\n      }));\r\n    }, 1000);\r\n  };\r\n\r\n  // Function to handle modal open\r\n  const openModal = (task) => {\r\n    setSelectedTask(task);\r\n    setEditedTask(task.toDoItem); // Initialize editedTask with the content of the selected task\r\n  };\r\n\r\n  // Function to handle modal close\r\n  const closeModal = () => {\r\n    setSelectedTask(null);\r\n    setEditedTask(''); // Clear editedTask when modal is closed\r\n  };\r\n\r\n  // Function to handle editing and saving task\r\n  const saveEditedTask = () => {\r\n    if (editedTask.trim() !== '') {\r\n      setTasks(tasks.map(task => {\r\n        const taskId = new Date().toLocaleString() + Math.floor(Math.random() * 100000);\r\n        if (task.id === selectedTask.id) {\r\n          return { ...task, toDoItem: editedTask, id: taskId };\r\n        }\r\n        return task;\r\n      }));\r\n      closeModal();\r\n    }\r\n  };\r\n\r\n  // Function to toggle task importancie\r\n  const toggleImportant = (taskId) => {\r\n    setTimeout(() => {\r\n      setTasks(tasks.map(task => {\r\n        if (task.id === taskId) {\r\n          return { ...task, important: !task.important };\r\n        }\r\n        return task;\r\n      }));\r\n    }, 1500);\r\n  };\r\n\r\n  // JSX for the checkbox badge\r\n  const importantBadge = (taskId, important) => (\r\n    <span className={`position-absolute translate-middle badge text-${important ? 'dark' : 'light'} bg-${!important ? 'secondary' : 'warning'}`} style={{ top: \"20px\", left: '83.5%', width: \"110px\" }} onClick={() => toggleImportant(taskId)}>\r\n      {important ? '! Important' : '- Not Important'}\r\n    </span>\r\n  );\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container my-5\">\r\n        <div className=\"d-inline\">\r\n          {tasks.length > 0 ? (\r\n            <>\r\n\r\n              {/* Pending tasks  */}\r\n              <div className=\"col mb-5\" >\r\n                <div className=\"row\">\r\n                  <h3 className='text-decoration-underline'>{pendingTasks.length > 0 ? \"Pending Tasks\" : \"\"}</h3>\r\n                  <div className=\"row row-cols-1 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 g-4 mt-2\">\r\n                    {pendingTasks.sort((a, b) => (b.important ? 1 : 0) - (a.important ? 1 : 0)).map((task, index) => (\r\n                      <div key={task.id || index} className=\"col-md-4\">\r\n                        <div className=\"card bg-light\" style={{ height: \"100%\" }}>\r\n                          {importantBadge(task.id, task.important)}\r\n                          <div className=\"form-check mx-3 mt-3 mb-3\">\r\n                            <input\r\n                              className=\"form-check-input\"\r\n                              type=\"checkbox\"\r\n                              onChange={() => completeTask(task.id)}\r\n                              checked={task.status === 'Completed'}\r\n                              id={`checkbox-${task.id}`}\r\n                            />\r\n                            <label className=\"form-check-label fw-bold\" htmlFor={`checkbox-${task.id}`}>\r\n                              {task.status}{task.status === 'Completed' ? '👍' : '⏰'}\r\n                            </label>\r\n                          </div>\r\n                          <div className=\"card-body\" onClick={() => openModal(task)}>\r\n                            <p className={`card-text ${task.status === \"Completed\" ? 'text-decoration-line-through' : ''}`} style={{ textAlign: 'justify' }}>\r\n                              {task.toDoItem.length > 250 ? task.toDoItem.substring(0, 250) + '...' : task.toDoItem}</p>\r\n                          </div>\r\n                          <div className=\"d-inline p-2 ms-auto\">\r\n                            <button\r\n                              className=\"btn btn-outline-danger \"\r\n                              onClick={() => removeItem(index)}\r\n                            >\r\n                              🗑️\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </div >\r\n\r\n              <hr />\r\n\r\n              {/* Completed tasks  */}\r\n              <div className=\"col mt-5\">\r\n                <div className=\"row\">\r\n                  <h3 className='text-decoration-underline'>{completedTasks.length > 0 ? \"Completed Tasks\" : \"\"}</h3>\r\n                  <div className=\"row row-cols-1 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 g-4 mt-2\">\r\n                    {completedTasks.sort((a, b) => (b.important ? 1 : 0) - (a.important ? 1 : 0)).map((task, index) => (\r\n                      <div key={task.id || index} className=\"col-md-4\">\r\n                        <div className=\"card bg-light\" style={{ height: \"100%\" }}>\r\n                          {importantBadge(task.id, task.important)}\r\n                          <div className=\"form-check mx-3 mt-3 mb-3\">\r\n                            <input\r\n                              className=\"form-check-input\"\r\n                              type=\"checkbox\"\r\n                              onChange={() => completeTask(task.id)}\r\n                              checked={task.status === 'Completed'}\r\n                              id={`checkbox-${task.id}`}\r\n                            />\r\n                            <label className=\"form-check-label fw-bold\" htmlFor={`checkbox-${task.id}`}>\r\n                              {task.status}{task.status === 'Completed' ? '👍' : '⏰'}\r\n                            </label>\r\n                          </div>\r\n                          <div className=\"card-body\" onClick={() => openModal(task)}>\r\n                            <p className={`card-text  ${task.status === \"Completed\" ? 'text-decoration-line-through' : ''}`} style={{ textAlign: 'justify' }}\r\n                            >{task.toDoItem.length > 250 ? task.toDoItem.substring(0, 250) + '...' : task.toDoItem}\r\n                            </p>\r\n                          </div>\r\n                          <div className=\"d-inline p-2 m-2\">\r\n                            <button\r\n                              className=\"btn btn-danger\"\r\n                              onClick={() => removeItem(index)}\r\n                            >\r\n                              Remove\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              { // Pop up modal for all tasks\r\n                selectedTask && (\r\n                  <div className=\"modal modal-lg\" tabIndex=\"-1\" style={{ display: 'block', backgroundColor: 'rgba(0, 0, 0, 0.5)' }}>\r\n                    <div className=\"modal-dialog modal-dialog-centered\">\r\n                      <div className=\"modal-content bg-secondary-subtle\">\r\n                        <div className=\"modal-header\">\r\n                          <h5 className=\"modal-title\">Edited on {selectedTask.id.slice(0, -5)}</h5>\r\n                          <button type=\"button\" className=\"btn-close\" onClick={closeModal}></button>\r\n                        </div>\r\n                        <div className=\"modal-body p-0\">\r\n                          <textarea\r\n                            style={{ height: \"500px !important\", textAlign: \"justify\" }}\r\n                            className=\"form-control bg-secondary-subtle\"\r\n                            value={editedTask}\r\n                            onChange={(e) => setEditedTask(e.target.value)}\r\n                            rows=\"18\" cols=\"30\"\r\n                          ></textarea>\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                          <button type=\"button\" className=\"btn btn-danger\" onClick={closeModal}>Close</button>\r\n                          <button type=\"button\" className=\"btn btn-success\" onClick={saveEditedTask}>Save</button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )\r\n              }\r\n            </>\r\n          ) : (\r\n            // Empty Task Display message\r\n            <div>\r\n              <h3 className='fst-italic fw-bold text-center'>Create a Tasks to Track Ur Journey</h3>\r\n            </div>\r\n          )}\r\n\r\n        </div >\r\n      </div >\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TaskNote;\r\n","import React from 'react'\r\nconst Navbar = ({ searchQuery, handleSearch,setSearchQuery,tasks, setTasks ,navBg}) => {\r\n\r\n    // Function to clear all tasks\r\n    const clearAllTasks = () => {\r\n        setTasks([]);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg ${navBg ? 'fixed-top bg-light shadow' : \"\"}`} data-bs-theme=\"dark\">\r\n                <div className=\"container\">\r\n                    <a className=\"navbar-brand text-dark fw-bold me-5\" href=\"/\">\r\n                        <img\r\n                            src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/756881/laptop.svg\"\r\n                            alt=\"To-Do List\"\r\n                            width=\"100\" height=\"50\"\r\n                            className=\"d-inline-block align-text-center\"\r\n                        />\r\n                        <span className='heading__title me-1 fst-italic'>I-List</span>\r\n                    </a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n\r\n                    {/* Searchbar  */}\r\n                    <form className=\"mx-md-auto mx-5  search-bar\" role=\"search\">\r\n                        <div className=\"input-group\">\r\n                            <input type=\"text\" className=\"search form-control\" placeholder=\"Search\" value={searchQuery}\r\n                                onChange={handleSearch} />\r\n                            <button className={`btn btn-reset d-${searchQuery.length > 0 ? 'block' : 'none' }`} type=\"reset\" onClick={() => setSearchQuery('')} id=\"button-addon2\">❌</button>\r\n                            <button className=\"btn btn-search\" type=\"button\" id=\"button-addon2\">🔍</button>\r\n                        </div>\r\n                    </form>\r\n                    \r\n                    {/* Tasks Clear button with Confirmation pop up */}\r\n                    <button className=\"button btn-shape ms-auto me-5 my-3 text-dark\" data-bs-toggle=\"modal\" data-bs-target=\"#staticBackdrop\" disabled={tasks.length > 0 ? false : true}>\r\n                        <span>Clear All</span>\r\n                    </button>\r\n\r\n                </div>\r\n            </nav>\r\n\r\n            {/* Confirmation pop up for clear all tasks*/}\r\n            <div className=\"modal fade\" id=\"staticBackdrop\" data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" tabIndex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog modal-dialog-centered\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h1 className=\"modal-title fs-5\" id=\"staticBackdropLabel\">Confirmation</h1>\r\n                            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            Are U Sure want to delete all tasks <br/>\r\n                            <b>Note: U may loss all ur tasks</b>\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-success active\" data-bs-dismiss=\"modal\">No</button>\r\n                            <button type=\"button\" className=\"btn btn-danger\" onClick={clearAllTasks} data-bs-dismiss=\"modal\">Yes</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React, { useState, useEffect } from 'react';\nimport TaskInput from './Components/TaskInput';\nimport TaskNoteList from './Components/TaskNote';\nimport './App.css'; // Import your CSS file\nimport Navbar from './Components/Navbar';\n\nfunction App() {\n  const [toDoListArray, setToDoListArray] = useState(() => {\n    const storedNotes = localStorage.getItem('toDoListArray');\n    return storedNotes ? JSON.parse(storedNotes) : [];\n  });\n  const [searchQuery, setSearchQuery] = useState('');\n  const [listening, setListening] = useState(false);\n  const [speechRecognition, setSpeechRecognition] = useState(null);\n  const [transcript, setTranscript] = useState('');\n  const [navBg, setNavBg] = useState(false);\n\n  // Update local storage whenever notes are updated\n  useEffect(() => {\n    localStorage.setItem('toDoListArray', JSON.stringify(toDoListArray));\n  }, [toDoListArray]);\n\n  // add task to localStorage\n  const addItemToArray = (toDoItem) => {\n    const taskId = new Date().toLocaleString() + Math.floor(Math.random() * 100000);\n    setToDoListArray((prevArray) => [{ toDoItem, id: taskId, status: \"Pending\" }, ...prevArray]);\n  };\n  \n  // remove task from localStorage\n  const removeItemFromArray = (id) => {\n    setToDoListArray((prevArray) =>\n      prevArray.filter((item, index) => index !== id)\n    );\n  };\n\n  // Searchbar - live search\n  const handleSearch = (event) => {\n    setSearchQuery(event.target.value);\n  };\n\n\n //voice synthesis to create and add task  \n  const handleToggleListening = () => {\n    if (!listening) {\n      const recognition = new window.webkitSpeechRecognition(); // Using Webkit Speech Recognition API\n      recognition.lang = 'en-US';\n      recognition.onresult = (event) => {\n        const transcript = event.results[0][0].transcript;\n        setTranscript(transcript);\n        setListening(false);\n        addItemToArray(transcript)\n        setTimeout(() => {\n          setTranscript('')\n        }, 2000);\n      };\n      recognition.onend = () => {\n        setListening(false);\n      };\n      recognition.start();\n      setListening(true);\n      setSpeechRecognition(recognition);\n    } else {\n      speechRecognition.stop();\n      setListening(false);\n    }\n  };\n\n\n  // change navbar background on scroll\n  const changeNavBg = () => {\n   window.scrollY >= 80 ? setNavBg(true) : setNavBg(false);\n  }\n  useEffect(() => {\n    window.addEventListener('scroll', changeNavBg);\n    return () => {\n      window.removeEventListener('scroll', changeNavBg);\n    }\n  }, [])\n\n  return (\n    <>\n      {/* Navbar */}\n      <Navbar searchQuery={searchQuery} handleSearch={handleSearch} setSearchQuery={setSearchQuery} tasks={toDoListArray} setTasks={setToDoListArray} navBg={navBg} />\n\n      <div className=\"container mt-5\">\n        <div className=\"row\">\n          {/* Task Input  */}\n          <TaskInput addItem={addItemToArray} />\n          {/* Voice Input  */}\n          <button className=\"w-50  mx-auto button\" onClick={handleToggleListening}>\n            <span>\n              {transcript} {listening ? '(Listening...)' : '(Start Listening)'}\n            </span>\n          </button>\n\n          <div>\n            {/* Tasks */}\n            <TaskNoteList\n              tasks={toDoListArray}\n              removeItem={removeItemFromArray}\n              searchQuery={searchQuery}\n              setTasks={setToDoListArray}\n            />\n          </div>\n        </div>\n      </div>\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}